{"version":3,"sources":["components/Banner.js","components/HeaderBar.js","components/Image.js","components/BackDrop.js","App.js","serviceWorker.js","index.js"],"names":["Banner","react_default","a","createElement","className","HeaderBar","props","href","Image","onClick","src","alt","BackDrop","ClickHandler","images","map","image","i","components_Image","key","name","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","imageClickHandler","event","newImages","state","forEach","target","isClicked","gameOver","reset","addPoint","currentScore","setState","isWon","highScore","shuffleImages","resetisClicked","alert","length","random","Math","floor","push","splice","winClickHandler","displayImages","components_BackDrop","components_HeaderBar","components_Banner","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73861b39.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Banner() {\r\n    return (\r\n        <div className=\"flow center\">\r\n            <h1>Clicky Game!</h1>\r\n            <h4>Click on an image only once to earn a point. Click the same image a second time and you lose!</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Banner;","import React from \"react\";\r\n\r\nfunction HeaderBar(props) {\r\n    return(\r\n        <nav>\r\n            <div className=\"nav-wrapper black\">\r\n                <a href=\"/\" className=\"brand-logo left\">Clicky Game!</a>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default HeaderBar;","import React from 'react';\r\n\r\nfunction Image(props) {\r\n    return (\r\n        <div className='col s4' onClick={props.onClick}>\r\n            <div className='card'>\r\n                <div className='card-image'>\r\n                    <img src={props.src} alt={props.alt} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Image;","import React from 'react';\r\nimport Image from './Image';\r\n\r\n\r\nconst BackDrop = function (props) {\r\n    return (\r\n        <div className=\"row\" onClick={props.ClickHandler}>\r\n            {props.images.map((image, i) => {\r\n            return <Image key={props.images[i].name} src={props.images[i].src} alt={props.images[i].name} onClick={props.onClick} />})}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BackDrop;","import React, { Component } from 'react';\nimport Banner from './components/Banner';\nimport HeaderBar from './components/HeaderBar';\nimport BackDrop from './components/BackDrop';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentScore: 0,\n      isWon: false,\n      highScore: 0,\n      images: [\n        {\n          src: './assets/images/GTR.jpg',\n          isClicked: false,\n          name: 'GTR'\n        },\n        {\n          src: './assets/images/ZR1.jpg',\n          isClicked: false,\n          name: 'ZR1'\n        },\n        {\n          src: './assets/images/GT.jpg',\n          isClicked: false,\n          name: 'GT'\n        },\n        {\n          src: './assets/images/Chiron.jpg',\n          isClicked: false,\n          name: 'Chiron'\n        },\n        {\n          src: './assets/images/F50.jpg',\n          isClicked: false,\n          name: 'F50'\n        },\n        {\n          src: './assets/images/S7.jpg',\n          isClicked: false,\n          name: 'S7'\n        },\n        {\n          src: './assets/images/GT350.jpg',\n          isClicked: false,\n          name: 'GT350'\n        },\n        {\n          src: './assets/images/One-77.jpg',\n          isClicked: false,\n          name: 'One-77'\n        },\n        {\n          src: './assets/images/Cobra.jpg',\n          isClicked: false,\n          name: 'Cobra'\n        },\n        {\n          src: './assets/images/Huracan.jpg',\n          isClicked: false,\n          name: 'Huracan'\n        },\n        {\n          src: './assets/images/720S.jpg',\n          isClicked: false,\n          name: '720S'\n        },\n        {\n          src: './assets/images/Huayra.jpg',\n          isClicked: false,\n          name: 'Huayra'\n        }\n      ]\n    };\n  }\n\n  imageClickHandler = (event) => {\n    let newImages = this.state.images;\n    newImages.forEach(image => {\n      if (image.name === event.target.alt) {\n        if (image.isClicked === true) {\n          this.gameOver();\n          this.reset();\n        }\n        else {\n          image.isClicked = true;\n          let addPoint = this.state.currentScore + 1;\n          if (addPoint === 12) {\n            this.setState({\n              isWon: true,\n              currentScore: 0,\n              highScore: 12\n            })\n          }\n          else {\n            this.setState({ currentScore: addPoint });\n          }\n        }\n      }\n    })\n    newImages = this.shuffleImages(newImages);\n    this.setState({ images: newImages });\n  }\n\n  reset = () => {\n    let newImages = this.resetisClicked(this.state.images);\n    this.setState({ images: newImages });\n\n    if (this.state.currentScore > this.state.highScore) {\n      let highScore = this.state.currentScore;\n      this.setState({\n        images: newImages,\n        highScore: highScore,\n        currentScore: 0\n      })\n    }\n    else {\n      this.setState({\n        images: newImages,\n        currentScore: 0\n      })\n    }\n  }\n\n  gameOver = () => {\n    alert('Please Try again')\n  }\n\n  resetisClicked = (images) => {\n    let newImages = images;\n    newImages.forEach(image => image.isClicked = false);\n    return newImages;\n  }\n\n  shuffleImages = (images) => {\n    let newImages = [];\n    for (let i = images.length; i > 0; i--) {\n      let random = Math.floor(Math.random() * i);\n      newImages.push(images.splice(random, 1)[0]);\n    }\n    return newImages;\n  }\n\n  winClickHandler = () => {\n    this.reset();\n    this.setState({ isWon: false })\n  }\n\n  displayImages = () => {\n    if (!this.state.isWon) {\n      return (\n        <BackDrop images={this.state.images} onClick={this.imageClickHandler} />\n      )\n    }\n    else {\n      return (\n        <div className=\"row\">\n          <h1>Congratulations! You Won!</h1>\n          <button className=\"btn btn-medium\" onClick={this.winClickHandler}>Play Again?</button>\n        </div>\n      )\n    }\n  }\n\n  render() {\n    return (\n\n      <div className=\"App\">\n        <HeaderBar />\n        <Banner />\n        <div className=\"container\">\n          <div className=\"row\">\n            <p>Current Score: {this.state.currentScore}</p>\n            <p>High Score: {this.state.highScore}</p>\n          </div>\n          <div className=\"row\" value={this.state.isWon}>\n            {this.displayImages()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}